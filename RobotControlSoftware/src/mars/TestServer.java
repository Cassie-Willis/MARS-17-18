package mars;

import java.io.*;
import java.net.*;

//test server to simulate robot; for debugging purposes
public class TestServer implements Runnable {
	private ServerSocket serverSocket;
	private Socket server;
	private ReceivingThread rt;
	private SendingThread st;

	public TestServer(int portNum) {
		try {
			serverSocket = new ServerSocket(portNum);
			serverSocket.setSoTimeout(0);
			rt = new ReceivingThread();
			st = new SendingThread();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		System.out.println("Starting Test Server...");
		System.out.println("Test Server Started");

		System.out.println("Waiting for client...");
		try {
			server = serverSocket.accept();
			System.out.println("Test Server connected to client");

			new Thread(rt).start();
			new Thread(st).start();

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public void stop() {
		rt.stopRunning();
		st.stopRunning();
		try {
			serverSocket.close();
			server.close();
			System.out.println("Stopped Test Server");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public class ReceivingThread implements Runnable {

		private volatile boolean running = true;
		@Override
		public void run() {
			long startTime = System.currentTimeMillis();
			try {
				
				// test server receives byte array and prints it console
				while (running) {
					InputStream in = server.getInputStream();
					byte[] input = new byte[14];
					int bytesRead = in.read(input, 0, input.length);

					if (bytesRead > 0) {
						System.out.println("Test Server received: " + byteArrToString(input, bytesRead));
					}
					
				}
			} catch (IOException e) {
			}

		}

		public void stopRunning() {
			running = false;
		}

	}

	// Thread that sends a random number of randomly-generated bytes
	public class SendingThread implements Runnable {

		public volatile boolean running = true;
		public volatile long timeLastSent = System.currentTimeMillis();
		public int index = 0;

		@Override
		public void run() {
			int[] codes = {1, 2, 3, 4, 5, 253, 252, 251, 250, 249};
			try {
				while (running) {
					try {
						Thread.sleep(2000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					//check again in case it was stopped while it was sleeping
					if (running) {
						OutputStream out = server.getOutputStream();
						int length = 3;

						byte[] output = new byte[length];
							output[0] = (byte)(255); 
							output[1] = (byte) (codes[index % 10]);
							index++;
							output[output.length - 1] = (byte)254;
						
						System.out.println("Test Server sent: " + byteArrToString(output, length));

						out.write(output, 0, output.length);
						timeLastSent = System.currentTimeMillis();
					}
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		public void stopRunning() {
			running = false;
		}
	}

	// formats byte array to String for easier reading
	public String byteArrToString(byte[] byteOutput, int length) {
		String formattedByteArr = "";
		for (int i = 0; i < length; i++) {
			formattedByteArr += String.format("%8s", Integer.toBinaryString((byteOutput[i] + 256) % 256)).replace(' ',
					'0');
			formattedByteArr += " ";
		}
		return formattedByteArr;
	}

	// for testing purposes
	public static void main(String[] args) {
		TestServer testServer = new TestServer(5565);
		new Thread(testServer).run();
	}

}
