//
// automatically generated by spin2cpp v3.6.4 on Thu Mar  8 17:13:03 2018
// /home/volsungasaga/Downloads/spin2cpp/build/spin2cpp --gas --side MainFinal (PST_Control).spin 
//

#ifndef Mainfinal__pst_control__Class_Defined__
#define Mainfinal__pst_control__Class_Defined__

#include <stdint.h>
#include "PST_Driver.h"
#include "FullDuplexSerial.h"

class Mainfinal__pst_control_ {
public:
#define MAINFINAL__PST_CONTROL___XINFREQ (5000000)
#define MAINFINAL__PST_CONTROL___CLKMODE ((8 + 1024))
#define MAINFINAL__PST_CONTROL__CONNECTIONPIN (0)
// Pin to send 9600 baud asynchronous data to all H-bridges (via their S1 pins
#define MAINFINAL__PST_CONTROL__TXPIN (15)
// Receive data from xBee's DOUT Pin
#define MAINFINAL__PST_CONTROL__XBEERX (17)
// Transmits data to xBee's DIN Pin 
#define MAINFINAL__PST_CONTROL__XBEETX (18)
// monitors the ADC chip's EOC state
#define MAINFINAL__PST_CONTROL__EOC (8)
// outputs the SPI clock signal to the ADC chip
#define MAINFINAL__PST_CONTROL__CLK (9)
// sends serial data to the ADC chip
#define MAINFINAL__PST_CONTROL__SOUT (10)
// receives serial data from the ADC chip
#define MAINFINAL__PST_CONTROL__SIN (11)
// selects/deselects the ADC chip
#define MAINFINAL__PST_CONTROL__CS (12)
// Right arm is about 30 more than the left arm (potentiometer reading)
#define MAINFINAL__PST_CONTROL__ARMOFFSET (25)
#define MAINFINAL__PST_CONTROL__MAXSPEED (75)
#define MAINFINAL__PST_CONTROL__SAMPLES (5)
// The pin the XBEE "Connected" pin is wired to
// Commands
// Stops drilling, tube, and wheel motors
#define MAINFINAL__PST_CONTROL__MOTORSTOP (50)
#define MAINFINAL__PST_CONTROL__ARMUP (1)
#define MAINFINAL__PST_CONTROL__ARMDOWN (2)
#define MAINFINAL__PST_CONTROL__FWDDRIVE (3)
#define MAINFINAL__PST_CONTROL__BACKDRIVE (4)
#define MAINFINAL__PST_CONTROL__STRAFERIGHT (5)
#define MAINFINAL__PST_CONTROL__STRAFELEFT (6)
#define MAINFINAL__PST_CONTROL__TURNRIGHT (7)
#define MAINFINAL__PST_CONTROL__TURNLEFT (8)
#define MAINFINAL__PST_CONTROL__DIG (9)
#define MAINFINAL__PST_CONTROL__DEPOSIT (10)
#define MAINFINAL__PST_CONTROL__TUBEUP (11)
#define MAINFINAL__PST_CONTROL__TUBEDOWN (12)
#define MAINFINAL__PST_CONTROL__INCREASEWHEELSPEED (13)
#define MAINFINAL__PST_CONTROL__DECREASEWHEELSPEED (14)
#define MAINFINAL__PST_CONTROL__INCREASETURNOFFSET (15)
#define MAINFINAL__PST_CONTROL__DECREASETURNOFFSET (16)
#define MAINFINAL__PST_CONTROL__RESETARMS (17)
#define MAINFINAL__PST_CONTROL__MAKERIGHTTURNINDENT (19)
#define MAINFINAL__PST_CONTROL__MAKELEFTTURNINDENT (20)
#define MAINFINAL__PST_CONTROL__LEFTARMUP (21)
#define MAINFINAL__PST_CONTROL__LEFTARMDOWN (22)
#define MAINFINAL__PST_CONTROL__RIGHTARMUP (23)
#define MAINFINAL__PST_CONTROL__RIGHTARMDOWN (24)
// Constant Limits
#define MAINFINAL__PST_CONTROL__MAXARMPOSITION (4000)
#define MAINFINAL__PST_CONTROL__MINARMPOSITION (300)
#define MAINFINAL__PST_CONTROL__MAXTUBEPOSITION (3300)
#define MAINFINAL__PST_CONTROL__MINTUBEPOSITION (100)
#define MAINFINAL__PST_CONTROL__MAXWHEELSPEED (127)
#define MAINFINAL__PST_CONTROL__MINWHEELSPEED (25)
#define MAINFINAL__PST_CONTROL__MAXDRILLSPEED (127)
// Constant Increments
#define MAINFINAL__PST_CONTROL__WHEELSPEEDINCREMENT (20)
#define MAINFINAL__PST_CONTROL__ARMPOSITIONINCREMENT (300)
#define MAINFINAL__PST_CONTROL__TUBEPOSITIONINCREMENT (250)
#define MAINFINAL__PST_CONTROL__WHEELTURNOFFSETINCREMENT (20)
#define MAINFINAL__PST_CONTROL__ARMSHIGHPOSITION (3900)
#define MAINFINAL__PST_CONTROL__ARMSLOWPOSITION (500)
// Offset for the uneven left arm
#define MAINFINAL__PST_CONTROL__LEFTARMBACKMOTORSPEEDOFFSET (5)
  PST_Driver	pst;
  FullDuplexSerial	HbridgeFDS;
  FullDuplexSerial	xbeeFDS;
  void 	Main(void);
  static void 	LeftArmControl(Mainfinal__pst_control_ *self);
  static void 	RightArmControl(Mainfinal__pst_control_ *self);
  static void 	TubeControl(Mainfinal__pst_control_ *self);
  void 	SendH(int32_t address, int32_t command, int32_t speed);
  static void 	ADCread(Mainfinal__pst_control_ *self);
  static int32_t 	ADC(int32_t NextChannel);
private:
  volatile int32_t 	xBeeCmd;
// Does not move until it detects the xbee is connected
  volatile int32_t 	xbeeconnected;
// For PST input
  volatile int32_t 	input;
  volatile int32_t 	leftArmSetPt, leftArmCurrentPos;
  volatile int32_t 	leftArmSpeed, leftArmDirection1, leftArmDirection2;
  volatile int32_t 	rightArmSetPt, rightArmCurrentPos;
  volatile int32_t 	rightArmSpeed, rightArmDirection1, rightArmDirection2;
  volatile int32_t 	rightWheelSpeed, rightWheelFrontDir, rightWheelBackDir;
  volatile int32_t 	leftWheelSpeed, leftWheelFrontDir, leftWheelBackDir;
// When turning, the slower wheel moves at this speed
  volatile int32_t 	wheelTurnOffset;
// Speed of wheels
  volatile int32_t 	wheelSpeed;
  volatile int32_t 	tubeSetPt, tubeCurrentPos;
  volatile int32_t 	tubeSpeed, tubeDirection;
  volatile int32_t 	drillDirection, drillSpeed;
  volatile int32_t 	LArmStack[100], RArmStack[100], ADCStack[100], PSTStack[100], TubeStack[100];
};

#endif
