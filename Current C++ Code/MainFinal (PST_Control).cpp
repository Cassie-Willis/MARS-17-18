//
// automatically generated by spin2cpp v3.6.4 on Thu Mar  8 17:13:03 2018
// /home/volsungasaga/Downloads/spin2cpp/build/spin2cpp --gas --side MainFinal (PST_Control).spin 
//

#include <stdlib.h>
#include <propeller.h>
#undef clkset
#undef cogid
#undef cogstop
#undef locknew
#undef lockret
#undef lockclr
#undef lockset
#undef waitcnt
#undef waitpeq
#undef waitpne
#define _waitcnt(x) __builtin_propeller_waitcnt((x), 0)
#include "MainFinal (PST_Control).h"

#define INLINE__ static inline
INLINE__ int32_t Min__(int32_t a, int32_t b) { return a < b ? a : b; }
INLINE__ int32_t Max__(int32_t a, int32_t b) { return a > b ? a : b; }
INLINE__ int32_t Shr__(uint32_t a, uint32_t b) { return (a>>b); }
typedef void (*Cogfunc__)(void *a, void *b, void *c, void *d);
static void Cogstub__(void *argp) {
  void **arg = (void **)argp;
  Cogfunc__ func = (Cogfunc__)(arg[0]);
  func(arg[1], arg[2], arg[3], arg[4]);
}
__asm__(".global _cogstart\n"); // force clone_cog to link if it is present
extern "C" void _clone_cog(void *tmp) __attribute__((weak));
extern "C" long _load_start_kernel[] __attribute__((weak));
static int32_t Coginit__(int cogid, void *stackbase, size_t stacksize, void *func, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4) {
    void *tmp = _load_start_kernel;
    unsigned int *sp = ((unsigned int *)stackbase) + stacksize/4;
    static int32_t cogargs__[5];
    int r;
    cogargs__[0] = (int32_t) func;
    cogargs__[1] = arg1;
    cogargs__[2] = arg2;
    cogargs__[3] = arg3;
    cogargs__[4] = arg4;
    if (_clone_cog) {
        tmp = __builtin_alloca(1984);
        _clone_cog(tmp);
    }
    *--sp = 0;
    *--sp = (unsigned int)cogargs__;
    *--sp = (unsigned int)Cogstub__;
    r = coginit(cogid, tmp, sp);
    return r;
}
void Mainfinal__pst_control_::Main(void)
{
  // Set connection pin to be an input
  DIRA &= (~(1 << MAINFINAL__PST_CONTROL__CONNECTIONPIN));
  // VARIABLE INITIALIZATION'''''
  // The initial position that the arm is set to hold
  leftArmSetPt = 872;
  rightArmSetPt = 872;
  tubeSetPt = 1000;
  drillSpeed = 0;
  rightWheelSpeed = 0;
  leftWheelSpeed = 0;
  wheelSpeed = 0;
  xbeeconnected = 0;
  input = 0;
  // xbeeFDS.start (xbeeRx, xbeeTx, 0, 9600)                                                                                                                  'Cog 1
  // coginit(2 , CommandInterface , @PSTStack)                                                                                            'Cog 2
  pst.start();
  // repeat until xbeeconnected == 1
  // Start the Asynchronous Serial driver to talk to the H-Bridges        Cog 3 
  HbridgeFDS.start(-1, MAINFINAL__PST_CONTROL__TXPIN, 0, 9600);
  // Read values from ADC                                                 Cog 4
  Coginit__(4, (void *)ADCStack, 400, (void *)ADCread, 0, 0, 0, 0);
  _waitcnt((CLKFREQ / 5) + CNT);
  // PI control for left arm                                       Cog 5
  Coginit__(5, (void *)LArmStack, 400, (void *)LeftArmControl, 0, 0, 0, 0);
  Coginit__(6, (void *)RArmStack, 400, (void *)RightArmControl, 0, 0, 0, 0);
  // Cog 6
  Coginit__(7, (void *)TubeStack, 400, (void *)TubeControl, 0, 0, 0, 0);
  _waitcnt(CLKFREQ + CNT);
  // -----------------------------------------------------------------------------------------------------------------
  // Address correspond to the Hbride you want to talk to. The addresses (128 - 133) are set by the switches on the Hbridge.
  // 128 = Right Arm, 129 = Left Arm, 130 = Right Wheel, 131 = Left Wheel, 132 = Tube Rotation, 133 = Auger Drilling
  // Commands control which motor you are turning on and its direction
  // 0 = Drive forward motor 1 (Front)
  // 1 = Drive backwards motor 1 (Back)
  // 4 = Drive forward motor 2 (Front)
  // 5 = Drive backwards motor 2 (Back)
  // Speed dictates how fast you want the motor to run. Range is from 0 - 127 for off to full forward/backward
  // Note that is a command of 0 is given, Sabertooth goes into power save mode after 4 seconds
  // ------------------------------------------------------------------------------------------------------------------
  tubeSetPt = 1000;
  _waitcnt(CLKFREQ + CNT);
  leftArmSetPt = 1500;
  rightArmSetPt = 1500;
  input = 0;
  xbeeconnected = 1;
  wheelSpeed = 25;
  wheelTurnOffset = 0;
  drillSpeed = 0;
  pst.str((int32_t)"Right Arm Pos: ");
  pst.dec(rightArmCurrentPos);
  pst.NewLine();
  pst.str((int32_t)"Left Arm Pos: ");
  pst.dec(leftArmCurrentPos);
  pst.NewLine();
  pst.str((int32_t)"Right Arm Set Pos: ");
  pst.dec(rightArmSetPt);
  pst.NewLine();
  pst.str((int32_t)"Left Arm Set Pos: ");
  pst.dec(leftArmSetPt);
  pst.NewLine();
  while (1) {
    input = pst.rxtime(100);
    pst.str((int32_t)"Right Arm Pos: ");
    pst.dec(rightArmCurrentPos);
    pst.NewLine();
    pst.str((int32_t)"Left Arm Pos: ");
    pst.dec(leftArmCurrentPos);
    pst.NewLine();
    pst.str((int32_t)"Right Arm Set Pos: ");
    pst.dec(rightArmSetPt);
    pst.NewLine();
    pst.str((int32_t)"Left Arm Set Pos: ");
    pst.dec(leftArmSetPt);
    pst.NewLine();
    switch(input) {
    case 0:
      // Right Wheel spinning clockwise (i.e motors spinning forwards)=
      rightWheelFrontDir = 0;
      rightWheelBackDir = 4;
      rightWheelSpeed = wheelTurnOffset;
      // Left Wheel spinning clockwise (i.e motors spinning forwards)
      leftWheelFrontDir = 0;
      leftWheelBackDir = 4;
      leftWheelSpeed = wheelSpeed;
      pst.str((int32_t)"Turning Right");
      pst.NewLine();
      break;
    case 1:
      // Right Wheel spinning clockwise (i.e motors spinning forwards)=
      rightWheelFrontDir = 1;
      rightWheelBackDir = 5;
      rightWheelSpeed = wheelSpeed;
      // Left Wheel spinning clockwise (i.e motors spinning forwards)
      leftWheelFrontDir = 1;
      leftWheelBackDir = 5;
      leftWheelSpeed = wheelTurnOffset;
      pst.str((int32_t)"Turning Left");
      pst.NewLine();
      break;
    case 2:
      // Right Wheel spinning clockwise (i.e motors spinning forwards)=
      rightWheelFrontDir = 1;
      rightWheelBackDir = 5;
      rightWheelSpeed = wheelTurnOffset;
      // Left Wheel spinning clockwise (i.e motors spinning forwards)
      leftWheelFrontDir = 0;
      leftWheelBackDir = 4;
      leftWheelSpeed = wheelSpeed;
      pst.str((int32_t)"Making Right Indent");
      pst.NewLine();
      break;
    case 3:
      // Right Wheel spinning clockwise (i.e motors spinning forwards)=
      rightWheelFrontDir = 0;
      rightWheelBackDir = 4;
      rightWheelSpeed = wheelSpeed;
      // Left Wheel spinning clockwise (i.e motors spinning forwards)
      leftWheelFrontDir = 1;
      leftWheelBackDir = 5;
      leftWheelSpeed = wheelTurnOffset;
      pst.str((int32_t)"Making Left Indent");
      pst.NewLine();
      break;
    case 4:
      // Right Wheel spinning clockwise (i.e motors spinning forwards)=
      rightWheelFrontDir = 0;
      rightWheelBackDir = 4;
      rightWheelSpeed = wheelSpeed;
      // Left Wheel spinning clockwise (i.e motors spinning forwards)
      leftWheelFrontDir = 0;
      leftWheelBackDir = 4;
      leftWheelSpeed = wheelSpeed;
      pst.str((int32_t)"Strafing Right");
      pst.NewLine();
      break;
    case 5:
      // Right Wheel spinning counterclockwise (i.e motors spinning backwards)
      rightWheelFrontDir = 1;
      rightWheelBackDir = 5;
      rightWheelSpeed = wheelSpeed;
      // Left Wheel spinning counterclockwise (i.e motors spinning backwards) 
      leftWheelFrontDir = 1;
      leftWheelBackDir = 5;
      leftWheelSpeed = wheelSpeed;
      pst.str((int32_t)"Strafing Left");
      pst.NewLine();
      break;
    case 6:
      // Right Wheel spinning counterclockwise (i.e motors spinning backwards)
      rightWheelFrontDir = 1;
      rightWheelBackDir = 5;
      rightWheelSpeed = wheelSpeed;
      // Left Wheel spinning counterclockwise (i.e motors spinning backwards) 
      leftWheelFrontDir = 0;
      leftWheelBackDir = 4;
      leftWheelSpeed = wheelSpeed;
      pst.str((int32_t)"Driving Fwd");
      pst.NewLine();
      break;
    case 7:
      // Right Wheel spinning counterclockwise (i.e motors spinning backwards)
      rightWheelFrontDir = 0;
      rightWheelBackDir = 4;
      rightWheelSpeed = wheelSpeed;
      // Left Wheel spinning counterclockwise (i.e motors spinning backwards) 
      leftWheelFrontDir = 1;
      leftWheelBackDir = 5;
      leftWheelSpeed = wheelSpeed;
      pst.str((int32_t)"Driving Back");
      pst.NewLine();
      break;
    case 8:
      wheelSpeed = Min__((Max__((wheelSpeed + MAINFINAL__PST_CONTROL__WHEELSPEEDINCREMENT), MAINFINAL__PST_CONTROL__MINWHEELSPEED)), MAINFINAL__PST_CONTROL__MAXWHEELSPEED);
      pst.str((int32_t)"Increase Wheel Speed");
      pst.NewLine();
      break;
    case 9:
      wheelSpeed = Min__((Max__((wheelSpeed - MAINFINAL__PST_CONTROL__WHEELSPEEDINCREMENT), MAINFINAL__PST_CONTROL__MINWHEELSPEED)), MAINFINAL__PST_CONTROL__MAXWHEELSPEED);
      pst.str((int32_t)"Decrease Wheek Speed");
      pst.NewLine();
      break;
    case 10:
      wheelTurnOffset = Min__((Max__((wheelTurnOffset + MAINFINAL__PST_CONTROL__WHEELTURNOFFSETINCREMENT), MAINFINAL__PST_CONTROL__MINWHEELSPEED)), MAINFINAL__PST_CONTROL__MAXWHEELSPEED);
      pst.str((int32_t)"Increase Turning Offset");
      pst.NewLine();
      break;
    case 11:
      wheelTurnOffset = Min__((Max__((wheelTurnOffset - MAINFINAL__PST_CONTROL__WHEELTURNOFFSETINCREMENT), MAINFINAL__PST_CONTROL__MINWHEELSPEED)), MAINFINAL__PST_CONTROL__MAXWHEELSPEED);
      pst.str((int32_t)"Decrease Turning Offset");
      pst.NewLine();
      break;
    case 12:
      tubeSetPt = Min__((Max__((tubeSetPt + MAINFINAL__PST_CONTROL__TUBEPOSITIONINCREMENT), MAINFINAL__PST_CONTROL__MINTUBEPOSITION)), MAINFINAL__PST_CONTROL__MAXTUBEPOSITION);
      pst.str((int32_t)"Tube Up");
      pst.NewLine();
      break;
    case 13:
      tubeSetPt = Min__((Max__((tubeSetPt - MAINFINAL__PST_CONTROL__TUBEPOSITIONINCREMENT), MAINFINAL__PST_CONTROL__MINTUBEPOSITION)), MAINFINAL__PST_CONTROL__MAXTUBEPOSITION);
      pst.str((int32_t)"Tube Down");
      pst.NewLine();
      break;
    case 14:
      drillDirection = 1;
      drillSpeed = MAINFINAL__PST_CONTROL__MAXDRILLSPEED;
      pst.str((int32_t)"Digging");
      pst.NewLine();
      break;
    case 15:
      drillDirection = 0;
      drillSpeed = MAINFINAL__PST_CONTROL__MAXDRILLSPEED;
      pst.str((int32_t)"Emptying");
      pst.NewLine();
      break;
    case 16:
      rightArmSetPt = 1500;
      leftArmSetPt = 1500;
      pst.str((int32_t)"Arm positions reset");
      pst.NewLine();
      break;
    case 17:
      leftArmSetPt = Min__((Max__((leftArmSetPt + MAINFINAL__PST_CONTROL__ARMPOSITIONINCREMENT), MAINFINAL__PST_CONTROL__MINARMPOSITION)), MAINFINAL__PST_CONTROL__MAXARMPOSITION);
      rightArmSetPt = Min__((Max__((rightArmSetPt + MAINFINAL__PST_CONTROL__ARMPOSITIONINCREMENT), MAINFINAL__PST_CONTROL__MINARMPOSITION)), MAINFINAL__PST_CONTROL__MAXARMPOSITION);
      pst.str((int32_t)"Raising Both Arms");
      pst.NewLine();
      break;
    case 18:
      leftArmSetPt = Min__((Max__((leftArmSetPt - MAINFINAL__PST_CONTROL__ARMPOSITIONINCREMENT), MAINFINAL__PST_CONTROL__MINARMPOSITION)), MAINFINAL__PST_CONTROL__MAXARMPOSITION);
      rightArmSetPt = Min__((Max__((rightArmSetPt - MAINFINAL__PST_CONTROL__ARMPOSITIONINCREMENT), MAINFINAL__PST_CONTROL__MINARMPOSITION)), MAINFINAL__PST_CONTROL__MAXARMPOSITION);
      pst.str((int32_t)"Lowering Both Arms");
      pst.NewLine();
      break;
    case 19:
      leftArmSetPt = Min__((Max__((leftArmSetPt + MAINFINAL__PST_CONTROL__ARMPOSITIONINCREMENT), MAINFINAL__PST_CONTROL__MINARMPOSITION)), MAINFINAL__PST_CONTROL__MAXARMPOSITION);
      pst.str((int32_t)"Raising Left Arm");
      pst.NewLine();
      break;
    case 20:
      leftArmSetPt = Min__((Max__((leftArmSetPt - MAINFINAL__PST_CONTROL__ARMPOSITIONINCREMENT), MAINFINAL__PST_CONTROL__MINARMPOSITION)), MAINFINAL__PST_CONTROL__MAXARMPOSITION);
      pst.str((int32_t)"Lowering Left Arm");
      pst.NewLine();
      break;
    case 21:
      rightArmSetPt = Min__((Max__((rightArmSetPt + MAINFINAL__PST_CONTROL__ARMPOSITIONINCREMENT), MAINFINAL__PST_CONTROL__MINARMPOSITION)), MAINFINAL__PST_CONTROL__MAXARMPOSITION);
      pst.str((int32_t)"Raising Right Arm");
      pst.NewLine();
      break;
    case 22:
      rightArmSetPt = Min__((Max__((rightArmSetPt - MAINFINAL__PST_CONTROL__ARMPOSITIONINCREMENT), MAINFINAL__PST_CONTROL__MINARMPOSITION)), MAINFINAL__PST_CONTROL__MAXARMPOSITION);
      pst.str((int32_t)"Lowering Right Arm");
      pst.NewLine();
      break;
    case MAINFINAL__PST_CONTROL__MOTORSTOP:
      /* 
            ArmsHighUp:
              leftArmSetPt  := ArmsHighPosition
              rightArmSetPt := ArmsHighPosition
      
            ArmsLowDown:
              leftArmSetPt  := ArmsLowPosition
              rightArmSetPt := ArmsLowPosition
            
       */
      rightWheelSpeed = 0;
      leftWheelSpeed = 0;
      drillSpeed = 0;
      tubeSetPt = tubeCurrentPos;
      break;
    }
    pst.str((int32_t)"CNT Value: ");
    pst.dec(CNT);
    pst.NewLine();
    pst.str((int32_t)"Right Arm Pos: ");
    pst.dec(rightArmCurrentPos);
    pst.NewLine();
    pst.str((int32_t)"Left Arm Pos: ");
    pst.dec(leftArmCurrentPos);
    pst.NewLine();
    pst.str((int32_t)"Right Arm Set Pos: ");
    pst.dec(rightArmSetPt);
    pst.NewLine();
    pst.str((int32_t)"Left Arm Set Pos: ");
    pst.dec(leftArmSetPt);
    pst.NewLine();
    // Send command and speed to specified H-bridge address
    // Front Right Arm
    SendH(128, rightArmDirection1, rightArmSpeed);
    // Back Right Arm    
    SendH(128, rightArmDirection2, rightArmSpeed);
    // Front Left Arm
    SendH(129, leftArmDirection1, leftArmSpeed);
    SendH(129, leftArmDirection2, leftArmSpeed - MAINFINAL__PST_CONTROL__LEFTARMBACKMOTORSPEEDOFFSET);
    if (((INA >> MAINFINAL__PST_CONTROL__CONNECTIONPIN) & 0x1) == 1) {
      // Front Right Wheel
      SendH(130, rightWheelFrontDir, 0);
      // Back Right Wheel
      SendH(130, rightWheelBackDir, 0);
      // Front Left Wheel
      SendH(131, leftWheelFrontDir, 0);
      // Back Left Wheel
      SendH(131, leftWheelBackDir, 0);
      SendH(132, tubeDirection, 0);
      SendH(133, drillDirection, 0);
    } else {
      // Front Right Wheel
      SendH(130, rightWheelFrontDir, rightWheelSpeed);
      // Back Right Wheel
      SendH(130, rightWheelBackDir, rightWheelSpeed);
      // Front Left Wheel
      SendH(131, leftWheelFrontDir, leftWheelSpeed);
      // Back Left Wheel
      SendH(131, leftWheelBackDir, leftWheelSpeed);
      SendH(132, tubeDirection, tubeSpeed);
      SendH(133, drillDirection, drillSpeed);
    }
  }
}

void Mainfinal__pst_control_::LeftArmControl(Mainfinal__pst_control_ *self)
{
  int32_t 	Kp, error, buffer;
  Kp = 10;
  self->leftArmSpeed = 0;
  while (1) {
    // Calculating error (Desired minus ADC reading)
    error = self->leftArmSetPt - self->leftArmCurrentPos;
    buffer = abs(((0 - (self->leftArmSetPt / 18)) + 311));
    if ((abs(error)) < 150) {
      self->leftArmSpeed = 0;
      continue;
    }
    if (error <= 0) {
      // if the left arm is above the set point
      // Setting direction (Arm moving up)
      self->leftArmDirection1 = 0;
      self->leftArmDirection2 = 4;
      Kp = 10;
    } else {
      // if the left arm is below the set point
      // Setting direction (Arm moving down)
      self->leftArmDirection1 = 1;
      self->leftArmDirection2 = 5;
      Kp = 25;
    }
    // sets the P value to the product of the error and the proportional gain
    self->leftArmSpeed = Min__((Max__((((abs(error)) * Kp) / 100), 25)), MAINFINAL__PST_CONTROL__MAXSPEED);
  }
}

void Mainfinal__pst_control_::RightArmControl(Mainfinal__pst_control_ *self)
{
  int32_t 	Kp, error;
  Kp = 10;
  self->rightArmSpeed = 0;
  while (1) {
    // Calculating error (Desired minus ADC reading)
    error = self->rightArmSetPt - self->rightArmCurrentPos;
    if ((abs(error)) < 150) {
      self->rightArmSpeed = 0;
      continue;
    }
    if (error <= 0) {
      // if the left arm is above the set point
      // Setting direction (Arm moving up)
      self->rightArmDirection1 = 1;
      self->rightArmDirection2 = 5;
      Kp = 7;
    } else {
      // if the left arm is below the set point
      // Setting direction (Arm moving down)
      self->rightArmDirection1 = 0;
      self->rightArmDirection2 = 4;
      Kp = 21;
    }
    // sets the P value to the product of the error and the proportional gain
    self->rightArmSpeed = Min__((Max__((((abs(error)) * Kp) / 100), 25)), MAINFINAL__PST_CONTROL__MAXSPEED);
  }
}

void Mainfinal__pst_control_::TubeControl(Mainfinal__pst_control_ *self)
{
  int32_t 	Kp, error;
  Kp = 10;
  self->tubeSpeed = 0;
  while (1) {
    // Calculating error (Desired minus ADC reading)
    error = self->tubeSetPt - self->tubeCurrentPos;
    if ((abs(error)) < 100) {
      self->tubeSpeed = 0;
      continue;
    }
    if (error < 0) {
      // if the left arm is above the set point
      // Setting direction (Arm moving up)
      self->tubeDirection = 0;
      Kp = 7;
    } else {
      // if the left arm is below the set point
      // Setting direction (Arm moving down)
      self->tubeDirection = 1;
      Kp = 15;
    }
    // sets the P value to the product of the error and the proportional gain
    self->tubeSpeed = Min__((Max__((((abs(error)) * Kp) / 100), 25)), MAINFINAL__PST_CONTROL__MAXSPEED);
  }
}

/* PUB CommandInterface  | input , wheelSpeed

  tubeSetPt     := 2300
  waitcnt(clkfreq+cnt)
  leftArmSetPt  := 300
  rightArmSetPt := 300 

  input := 0  
  xbeeconnected   := 1
  wheelSpeed      := 25
  wheelTurnOffset := 0
  drillSpeed      := 0
             
  repeat                                              
    input := pst.DecIn    
    
    case input
      0:       
        rightWheelFrontDir := 0                                        'Right Wheel spinning clockwise (i.e motors spinning forwards)=
        rightWheelBackDir  := 4 
        rightWheelSpeed    := wheelTurnOffset
       
        leftWheelFrontDir  := 0                                        'Left Wheel spinning clockwise (i.e motors spinning forwards)
        leftWheelBackDir   := 4 
        leftWheelSpeed     := wheelSpeed

        pst.str(String("Turning Right"))
        pst.NewLine                          
        
      1:       
        rightWheelFrontDir := 1                                        'Right Wheel spinning clockwise (i.e motors spinning forwards)=
        rightWheelBackDir  := 5 
        rightWheelSpeed    := wheelSpeed                            
       
        leftWheelFrontDir  := 1                                        'Left Wheel spinning clockwise (i.e motors spinning forwards)
        leftWheelBackDir   := 5 
        leftWheelSpeed     := wheelTurnOffset

        pst.str(String("Turning Left"))
        pst.NewLine                           
                           
      2:
        rightWheelFrontDir := 1                                        'Right Wheel spinning clockwise (i.e motors spinning forwards)=
        rightWheelBackDir  := 5 
        rightWheelSpeed    := wheelTurnOffset
       
        leftWheelFrontDir  := 0                                        'Left Wheel spinning clockwise (i.e motors spinning forwards)
        leftWheelBackDir   := 4 
        leftWheelSpeed     := wheelSpeed

        pst.str(String("Making Right Indent"))
        pst.NewLine         
        
      3:
        rightWheelFrontDir := 0                                        'Right Wheel spinning clockwise (i.e motors spinning forwards)=
        rightWheelBackDir  := 4 
        rightWheelSpeed    := wheelSpeed                            
       
        leftWheelFrontDir  := 1                                        'Left Wheel spinning clockwise (i.e motors spinning forwards)
        leftWheelBackDir   := 5 
        leftWheelSpeed     := wheelTurnOffset

        pst.str(String("Making Left Indent"))
        pst.NewLine                                                                  
        
      4:                                                                                    
        rightWheelFrontDir := 0                                        'Right Wheel spinning clockwise (i.e motors spinning forwards)=
        rightWheelBackDir  := 4 
        rightWheelSpeed    := wheelSpeed
       
        leftWheelFrontDir  := 0                                        'Left Wheel spinning clockwise (i.e motors spinning forwards)
        leftWheelBackDir   := 4 
        leftWheelSpeed     := wheelSpeed

        pst.str(String("Strafing Right"))
        pst.NewLine          

      5:                                                                                    
        rightWheelFrontDir := 1                                        'Right Wheel spinning counterclockwise (i.e motors spinning backwards)
        rightWheelBackDir  := 5 
        rightWheelSpeed    := wheelSpeed 
       
        leftWheelFrontDir  := 1                                        'Left Wheel spinning counterclockwise (i.e motors spinning backwards) 
        leftWheelBackDir   := 5        
        leftWheelSpeed     := wheelSpeed

        pst.str(String("Strafing Left"))
        pst.NewLine  

      6:                                                                                      
        rightWheelFrontDir := 1                                        'Right Wheel spinning counterclockwise (i.e motors spinning backwards)
        rightWheelBackDir  := 5 
        rightWheelSpeed    := wheelSpeed
       
        leftWheelFrontDir  := 0                                        'Left Wheel spinning counterclockwise (i.e motors spinning backwards) 
        leftWheelBackDir   := 4        
        leftWheelSpeed     := wheelSpeed

        pst.str(String("Driving Fwd"))
        pst.NewLine          

      7:                                                                                     
        rightWheelFrontDir := 0                                        'Right Wheel spinning counterclockwise (i.e motors spinning backwards)
        rightWheelBackDir  := 4 
        rightWheelSpeed    := wheelSpeed
       
        leftWheelFrontDir  := 1                                        'Left Wheel spinning counterclockwise (i.e motors spinning backwards) 
        leftWheelBackDir   := 5        
        leftWheelSpeed     := wheelSpeed

        pst.str(String("Driving Back"))
        pst.NewLine          

      8:
        wheelSpeed         := wheelSpeed + WheelSpeedIncrement           #>MinWheelSpeed <#MaxWheelSpeed

        pst.str(String("Increase Wheel Speed"))
        pst.NewLine  

      9:
        wheelSpeed         := wheelSpeed - WheelSpeedIncrement           #>MinWheelSpeed <#MaxWheelSpeed

        pst.str(String("Decrease Wheek Speed"))
        pst.NewLine          

      10:
        wheelTurnOffset    := wheelTurnOffset + WheelTurnOffsetIncrement #>MinWheelSpeed <#MaxWheelSpeed

        pst.str(String("Increase Turning Offset"))
        pst.NewLine  

      11:
        wheelTurnOffset    := wheelTurnOffset - WheelTurnOffsetIncrement #>MinWheelSpeed <#MaxWheelSpeed

        pst.str(String("Decrease Turning Offset"))
        pst.NewLine 
    
      12:                                   
        tubeSetPt          := tubeSetPt + TubePositionIncrement #>MinTubePosition <#MaxTubePosition

        pst.str(String("Tube Up"))
        pst.NewLine 

      13:
        tubeSetPt          := tubeSetPt - TubePositionIncrement #>MinTubePosition <#MaxTubePosition

        pst.str(String("Tube Down"))
        pst.NewLine

      14:                                 
        drillDirection := 1
        drillSpeed     := MaxDrillSpeed

        pst.str(String("Digging"))
        pst.NewLine

      15:                             
        drillDirection := 0
        drillSpeed     := MaxDrillSpeed

        pst.str(String("Emptying"))
        pst.NewLine
      
      16:
        rightArmSetPt      := 1500
        leftArmSetPt       := 1500

        pst.str(String("Arm positions reset"))
        pst.NewLine
                
      17:                                                  
        leftArmSetPt  := leftArmSetPt  + ArmPositionIncrement #>MinArmPosition <#MaxArmPosition
        rightArmSetPt := rightArmSetPt + ArmPositionIncrement #>MinArmPosition <#MaxArmPosition

        pst.str(String("Raising Both Arms"))
        pst.NewLine

      18:
        leftArmSetPt  := leftArmSetPt  - ArmPositionIncrement #>MinArmPosition <#MaxArmPosition
        rightArmSetPt := rightArmSetPt - ArmPositionIncrement #>MinArmPosition <#MaxArmPosition

        pst.str(String("Lowering Both Arms"))
        pst.NewLine

      19:
        LeftArmSetPt := LeftArmSetPt + ArmPositionIncrement #>MinArmPosition <#MaxArmPosition

        pst.str(String("Raising Left Arm"))
        pst.NewLine

      20:
        LeftArmSetPt := LeftArmSetPt - ArmPositionIncrement #>MinArmPosition <#MaxArmPosition

        pst.str(String("Lowering Left Arm"))
        pst.NewLine

      21:
        RightArmSetPt := RightArmSetPt + ArmPositionIncrement #>MinArmPosition <#MaxArmPosition

        pst.str(String("Raising Right Arm"))
        pst.NewLine

      22:
        RightArmSetPt := RightArmSetPt - ArmPositionIncrement #>MinArmPosition <#MaxArmPosition

        pst.str(String("Lowering Right Arm"))
        pst.NewLine      

      {
      ArmsHighUp:
        leftArmSetPt  := ArmsHighPosition
        rightArmSetPt := ArmsHighPosition

      ArmsLowDown:
        leftArmSetPt  := ArmsLowPosition
        rightArmSetPt := ArmsLowPosition
      }

      MotorStop:
        rightWheelSpeed := 0
        leftWheelSpeed  := 0
        drillSpeed      := 0
        tubeSetPt       := tubeCurrentPos

      
 
 */
//
// The below code is almost guaranteed to not be the issue
//     
void Mainfinal__pst_control_::SendH(int32_t address, int32_t command, int32_t speed)
{
  int32_t 	checksum;
  checksum = ((address + command) + speed) & 0x7f;
  // H-bridge address # (128-133)
  HbridgeFDS.tx(address);
  // Motor B: 0=forward 1=backward ; Motor A: 4=forward 5=backward
  HbridgeFDS.tx(command);
  // Speed 0-127 0=stop (0% duty cycle), 127=max speed (100% duty cycle)
  HbridgeFDS.tx(speed);
  // If the H-bridge doesn't calculate the same checksum, then there was a transmission error and the command will be ignored
  HbridgeFDS.tx(checksum);
}

void Mainfinal__pst_control_::ADCread(Mainfinal__pst_control_ *self)
{
  int32_t 	leftAngleData, rightAngleData, tubeAngleData, _idx__0001;
  DIRA = (DIRA & 0xffffe0ff) | 0x1600;
  // Get ready to read the leftArmPosition
  self->ADC(2);
  while (1) {
    leftAngleData = 0;
    rightAngleData = 0;
    tubeAngleData = 0;
    for(_idx__0001 = 0; _idx__0001 < MAINFINAL__PST_CONTROL__SAMPLES; _idx__0001++) {
      // Read left arm and get ready to read right arm
      leftAngleData = leftAngleData + self->ADC(1);
      // Read right arm and get ready to read tube
      rightAngleData = rightAngleData + self->ADC(0);
      // Read tube and get ready to read left arm
      tubeAngleData = tubeAngleData + self->ADC(2);
    }
    self->leftArmCurrentPos = leftAngleData / MAINFINAL__PST_CONTROL__SAMPLES;
    self->rightArmCurrentPos = rightAngleData / MAINFINAL__PST_CONTROL__SAMPLES;
    self->tubeCurrentPos = tubeAngleData / MAINFINAL__PST_CONTROL__SAMPLES;
  }
}

int32_t Mainfinal__pst_control_::ADC(int32_t NextChannel)
{
  int32_t 	dataByte, i, _mask_0002;
  int32_t ADCbits = 0;
  _mask_0002 = 1 << MAINFINAL__PST_CONTROL__SOUT;
  // Read current ADC channel value & set the channel for the next conversion
  // Set I/O pin direction register (Hint: In case this is used on a separate cog!-)  
  DIRA = (DIRA & 0xffffe0ff) | 0x1600;
  // Initialize ADCbits to zero
  ADCbits = 0;
  // Set the clock pin Low
  OUTA &= (~(1 << MAINFINAL__PST_CONTROL__CLK));
  // Set the chip select pin Low
  OUTA &= (~(1 << MAINFINAL__PST_CONTROL__CS));
  // Setup the 12-bit control value to send to the ADC chip
  dataByte = (NextChannel << 8) + (0 << 4);
  // Wait for eco pin to indicate the end of the previous conversion
  __builtin_propeller_waitpeq(1 << MAINFINAL__PST_CONTROL__EOC, 1 << MAINFINAL__PST_CONTROL__EOC);
  for(i = 11; i >= 0; --i) {
    // Shift previous data bits to left & add Sin pin's current state from ADC
    ADCbits = (ADCbits << 1) + ((INA >> MAINFINAL__PST_CONTROL__SIN) & 0x1);
    // Send the ith bit out across the Sout line
    if ((Shr__(dataByte, i)) & 0x1) {
      OUTA |= _mask_0002;
    } else {
      OUTA &= (~_mask_0002);
    }
    // Set the clock pin Low                                                                   
    OUTA &= (~(1 << MAINFINAL__PST_CONTROL__CLK));
    // Set the clock pin High (data is transferred across SPI)                                 
    OUTA |= (1 << MAINFINAL__PST_CONTROL__CLK);
    // Set the clock pin Low                                                                   
    OUTA &= (~(1 << MAINFINAL__PST_CONTROL__CLK));
  }
  // Set the chip select pin High
  OUTA |= (1 << MAINFINAL__PST_CONTROL__CS);
  return ADCbits;
}

__asm__( "    .global __clkfreqval\n" );
__asm__( "    __clkfreqval = 0x4c4b400\n" );
__asm__( "    .global __clkmodeval\n" );
__asm__( "    __clkmodeval = 0x6f\n" );

Mainfinal__pst_control_ MainObj__;

int main() {
  MainObj__.Main();
  return 0;
}
