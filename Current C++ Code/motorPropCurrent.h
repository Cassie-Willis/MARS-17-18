//
// automatically generated by spin2cpp v3.6.4 on Thu Mar  8 17:11:55 2018
// /home/volsungasaga/Downloads/spin2cpp/build/spin2cpp --gas --side motorPropCurrent.spin 
//

#ifndef motorPropCurrent_Class_Defined__
#define motorPropCurrent_Class_Defined__

#include <stdint.h>
#include "PST_Driver.h"
#include "FullDuplexSerial.h"

class motorPropCurrent {
public:
#define MOTORPROPCURRENT__XINFREQ (5000000)
#define MOTORPROPCURRENT__CLKMODE ((8 + 1024))
#define MOTORPROPCURRENT_CONNECTIONPIN (0)
// Pin to send 9600 baud asynchronous data to all H-bridges (via their S1 pins
#define MOTORPROPCURRENT_TXPIN (8)
// Receive data from xBee's DOUT Pin
#define MOTORPROPCURRENT_XBEERX (9)
// Transmits data to xBee's DIN Pin                
#define MOTORPROPCURRENT_XBEETX ((-1))
// connection between prop1 and prop2
#define MOTORPROPCURRENT_P2RX (9)
#define MOTORPROPCURRENT_P2TX (0)
// ADC Pins
// P15 receives the "end of conversion" signal from ADC
#define MOTORPROPCURRENT_EOC (15)
// P14 sends the synchronous clock pulses to ADC chip
#define MOTORPROPCURRENT_CLK (14)
// Data going to the ADI pin on ADC
#define MOTORPROPCURRENT_SOUT (13)
// Data coming from the ADO pin on ADC
#define MOTORPROPCURRENT_SIN (12)
// Chip Select
#define MOTORPROPCURRENT_CS (11)
// Index of the byte number that is received from the remote control station (Type: Joystick)
// Start Byte
#define MOTORPROPCURRENT_BYTE_BEGINPACKET (0)
// Right Joystick Buttonset 1
#define MOTORPROPCURRENT_BYTE_RJBUTS1 (1)
// Right Joystick Buttonset 2
#define MOTORPROPCURRENT_BYTE_RJBUTS2 (2)
// Right Joystick Y Axis
#define MOTORPROPCURRENT_BYTE_RY (3)
// Right Joystick X Axis
#define MOTORPROPCURRENT_BYTE_RX (4)
// Right Joystick Z Axis
#define MOTORPROPCURRENT_BYTE_RZ (5)
// Right Joystick Throttle
#define MOTORPROPCURRENT_BYTE_RTHROTTLE (6)
// Left  Joystick Buttonset 1
#define MOTORPROPCURRENT_BYTE_LJBUTS1 (7)
// Left  Joystick Buttonset 2
#define MOTORPROPCURRENT_BYTE_LJBUTS2 (8)
// Left  Joystick Y Axis   
#define MOTORPROPCURRENT_BYTE_LY (9)
// Left  Joystick X Axis
#define MOTORPROPCURRENT_BYTE_LX (10)
// Left  Joystick Z Axis
#define MOTORPROPCURRENT_BYTE_LZ (11)
// Left  Joystick Throttle
#define MOTORPROPCURRENT_BYTE_LTHROTTLE (12)
// End Byte
#define MOTORPROPCURRENT_BYTE_ENDPACKET (13)
// POV Thumb Stick has only up, down, left, right
#define MOTORPROPCURRENT_BUTTON_UP (12)
#define MOTORPROPCURRENT_BUTTON_DOWN (13)
#define MOTORPROPCURRENT_BUTTON_RIGHT (14)
#define MOTORPROPCURRENT_BUTTON_LEFT (15)
// ADC Channel Labels
/* 
    CHANNEL MAP
    0 => Excavator   
    1 => Front Left  (FL)
    2 => Front Right (FR)  
    8 => Rear  Left  (RL)  
    5 => Rear  Right (RR)
  
 */
#define MOTORPROPCURRENT_ADCEXC (1)
#define MOTORPROPCURRENT_ADCFL (0)
#define MOTORPROPCURRENT_ADCFR (2)
#define MOTORPROPCURRENT_ADCRL (8)
#define MOTORPROPCURRENT_ADCRR (5)
// Excavator Positions
// 1270       'MIN Pos on Cart
#define MOTORPROPCURRENT_EXCMIN (1247)
// 1505       'MAX Pos on Cart
#define MOTORPROPCURRENT_EXCMAX (1525)
// Pos to be at to dig
#define MOTORPROPCURRENT_EXCDIGPOS (1300)
// ERROR MSG SENT INDICATORS
#define MOTORPROPCURRENT_INDEXC (0)
#define MOTORPROPCURRENT_INDFL (1)
#define MOTORPROPCURRENT_INDRL (2)
#define MOTORPROPCURRENT_INDRR (3)
#define MOTORPROPCURRENT_INDFR (4)
#define MOTORPROPCURRENT_DEBUG1 (16)
#define MOTORPROPCURRENT_DEBUG2 (17)
#define MOTORPROPCURRENT_DEBUG3 (18)
  PST_Driver	pst;
  FullDuplexSerial	HbridgeFDS;
  FullDuplexSerial	p1Serial;
  void 	Main(void);
  int32_t 	validateStartEnd(void);
  static void 	processState(motorPropCurrent *self);
  void 	checkForModeButtons(void);
  int32_t 	getLY(void);
  int32_t 	getRY(void);
  int32_t 	getLX(void);
  int32_t 	getRX(void);
  int32_t 	getLZ(void);
  int32_t 	getRZ(void);
  int32_t 	getRT(void);
  int32_t 	getLT(void);
  int32_t 	getRightButton(int32_t buttNum);
  int32_t 	getLeftButton(int32_t buttNum);
  void 	flarm(int32_t inspeed);
  void 	blarm(int32_t inspeed);
  void 	frarm(int32_t inspeed);
  void 	brarm(int32_t inspeed);
  void 	leftArm(int32_t inspeed);
  void 	rightArm(int32_t inspeed);
  void 	leftScrew(int32_t inspeed);
  void 	rightScrew(int32_t inspeed);
  void 	linAct(int32_t inspeed);
  void 	mainArm(int32_t inspeed);
  static void 	PotControl(motorPropCurrent *self);
  static void 	updateADC(motorPropCurrent *self);
  static int32_t 	ADC(int32_t NextChannel);
  static void 	motorDriverUpdater(motorPropCurrent *self);
  void 	SendH(int32_t address, int32_t command, int32_t speed);
private:
  volatile int32_t 	xbeeconnected;
  volatile int32_t 	frontRightArmSpeed, backRightArmSpeed, frontRightArmDir, rearRightArmDir;
  volatile int32_t 	frontLeftArmSpeed, backLeftArmSpeed, frontLeftArmDir, rearLeftArmDir;
  volatile int32_t 	rightWheelSpeed, frontRightWheelDir, rearRightWheelDir;
  volatile int32_t 	leftWheelSpeed, frontLeftWheelDir, rearLeftWheelDir;
  volatile int32_t 	excavatorSpeed, excavatorDir, invertedExcavatorDir;
  volatile int32_t 	linActSpeed, linActDir;
  volatile int32_t 	PosLegFL, PosLegFR, PosLegRL, PosLegRR;
  volatile int32_t 	PosExcavator;
  volatile int32_t 	DesPosLegFL, DesPosLegFR, DesPosLegRL, DesPosLegRR;
  volatile int32_t 	DesPosExcavator;
  volatile int32_t 	desiredValuesSet;
  volatile int32_t 	FLBuf[5], FRBuf[5], RLBuf[5], RRBuf[5], ExcBuf[5];
  volatile int32_t 	FLInd, FRInd, RLInd, RRInd, ExcInd;
  volatile int32_t 	PrevPos[5];
  volatile int32_t 	motorStack[100], RobotStack[100], ADCStack[50], PotStack[50];
  volatile int32_t 	inputPacket[14];
  volatile char 	enableFl, enableFR, enableRL, enableRR, enableExc;
  volatile char 	enableRightArms, enableLeftArms;
  volatile char 	macroRunning;
  volatile char 	phase;
  volatile char 	desiredPositionsSet;
  volatile char 	ErrorExc, ErrorFL, ErrorFR, ErrorRL, ErrorRR;
  volatile char 	stableADCReading;
  volatile char 	ExcActiveModeEnabled, ArmsActiveModeEnabled;
  volatile char 	PrevPosSet[5];
  volatile char 	resetPosMsg[5];
  volatile char 	errorMsg[5];
  volatile char 	errorFlag[5];
  volatile char 	isConnected;
};

#endif
